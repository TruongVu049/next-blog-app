// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String  @unique
  Post        Post[]  @relation("CategoryPost")
}

model Post {
  id          Int      @id @default(autoincrement())
  updatedAt   DateTime @default(now())
  title       String
  content     String
  image       String?
  view        Int      @default(0)
  like        Int      @default(0)
  slug        String   @unique
  id_category Int?

  id_user String?

  category Category? @relation("CategoryPost", fields: [id_category], references: [id])

  user        User?         @relation("UserPost", fields: [id_user], references: [id])
  PostComment PostComment[] @relation("PostPostComment")

  @@fulltext([content])
  @@fulltext([content, title])
}

model PostComment {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  name      String
  image     String?
  content   String
  id_post   Int
  id_parent Int?

  post Post? @relation("PostPostComment", fields: [id_post], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[] @relation("UserPost")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
